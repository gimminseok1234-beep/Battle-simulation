import { TILE, TEAM, COLORS, GRID_SIZE, DEEP_COLORS } from './constants.js';
import { Weapon, MagicDaggerDashEffect, createPhysicalHitEffect } from './weaponary.js';
import { Nexus } from './entities.js';

// Unit class
export class Unit {
    constructor(gameManager, x, y, team) {
        this.gameManager = gameManager;
        this.gridX = x; this.gridY = y;
        this.pixelX = x * GRID_SIZE + GRID_SIZE / 2;
        this.pixelY = y * GRID_SIZE + GRID_SIZE / 2;
        this.team = team;
        this.hp = 100;
        this.maxHp = 100;
        this.displayHp = 100;
        this.damageFlash = 0;

        // Î†àÎ≤®ÏóÖ ÏãúÏä§ÌÖú ÏÜçÏÑ±
        this.level = 1;
        this.maxLevel = 5;
        this.killedBy = null;
        this.specialAttackLevelBonus = 0;
        this.levelUpParticleCooldown = 0;

        this.baseSpeed = 1.0; this.facingAngle = gameManager.random() * Math.PI * 2;
        this.baseAttackPower = 5; this.baseAttackRange = 1.5 * GRID_SIZE;
        this.baseDetectionRange = 6 * GRID_SIZE;
        this.attackCooldown = 0; this.baseCooldownTime = 80;
        this.state = 'IDLE'; this.alertedCounter = 0;
        this.weapon = null; this.target = null; this.moveTarget = null;
        this.isCasting = false; this.castingProgress = 0; this.castTargetPos = null;
        this.castDuration = 180;
        this.teleportCooldown = 0;
        this.isKing = false; this.spawnCooldown = 0; this.spawnInterval = 720;
        this.knockbackX = 0; this.knockbackY = 0;
        this.isInMagneticField = false;
        this.evasionCooldown = 0;
        this.attackAnimationTimer = 0;
        this.magicCircleCooldown = 0;
        this.boomerangCooldown = 0;
        this.shurikenSkillCooldown = 0;
        this.isStunned = 0;
        this.stunnedByMagicCircle = false;
        this.poisonEffect = { active: false, duration: 0, damage: 0 };
        this.isBeingPulled = false;
        this.puller = null;
        this.pullTargetPos = null;
        this.hpBarVisibleTimer = 0;
        this.isDashing = false;
        this.dashSpeed = 8;
        this.dashDistanceRemaining = 0;
        this.dashDirection = null;
        this.dashTrail = [];
        this.name = '';
        this.nameColor = '#000000';
        this.awakeningEffect = { active: false, stacks: 0, timer: 0 };
        this.magicDaggerSkillCooldown = 0;
        this.isAimingMagicDagger = false;
        this.magicDaggerAimTimer = 0;
        this.magicDaggerTargetPos = null;
        this.axeSkillCooldown = 0; // [ü™ì MODIFIED] ÎèÑÎÅº Ïä§ÌÇ¨ Ïø®Îã§Ïö¥ Ï∂îÍ∞Ä
        this.spinAnimationTimer = 0;
        this.iceDiamondCharges = 0;
        this.iceDiamondChargeTimer = 0;
        this.fireStaffSpecialCooldown = 0;
        this.isSlowed = 0;
        this.attackCount = 0;
        this.swordSpecialAttackAnimationTimer = 0;

        this.dualSwordSkillCooldown = 0;
        this.dualSwordTeleportTarget = null;
        this.dualSwordTeleportDelayTimer = 0;
        this.dualSwordSpinAttackTimer = 0;
        this.isMarkedByDualSword = { active: false, timer: 0 };

        this.isInLava = false;
        this.fleeingCooldown = 0;

        this.stuckTimer = 0;
        this.lastPosition = { x: this.pixelX, y: this.pixelY };

        this.isSpecialAttackReady = false;
    }

    // ... (getters: speed, attackPower, attackRange, detectionRangeÎäî Í∑∏ÎåÄÎ°ú Ïú†ÏßÄ) ...
    get speed() {
        const gameManager = this.gameManager;
        if (!gameManager || this.isStunned > 0) {
            return 0;
        }

        let speedModifier = 0;
        if (this.isInMagneticField) speedModifier = -0.7;
        if (this.poisonEffect.active) speedModifier -= 0.7;
        if (this.isSlowed > 0) speedModifier -= 0.3;

        const gridX = Math.floor(this.pixelX / GRID_SIZE);
        const gridY = Math.floor(this.pixelY / GRID_SIZE);
        if (gridY >= 0 && gridY < gameManager.ROWS && gridX >= 0 && gridX < gameManager.COLS) {
            const tile = gameManager.map[gridY][gridX];
            if (tile.type === TILE.LAVA) speedModifier = -0.5;
        }

        let combatSpeedBoost = 0;
        if (this.weapon && this.weapon.type === 'dual_swords' && (this.state === 'AGGRESSIVE' || this.state === 'ATTACKING_NEXUS')) {
            combatSpeedBoost = 0.5;
        }
        let finalSpeed = (this.baseSpeed + (this.weapon ? this.weapon.speedBonus || 0 : 0) + combatSpeedBoost) + speedModifier;
        finalSpeed *= (1 + (this.level - 1) * 0.06);

        return Math.max(0.1, finalSpeed);
    }

    get attackPower() {
        return this.baseAttackPower + (this.weapon ? this.weapon.attackPowerBonus || 0 : 0) + this.specialAttackLevelBonus;
    }
    get attackRange() { return this.baseAttackRange + (this.weapon ? this.weapon.attackRangeBonus || 0 : 0); }
    get detectionRange() { return this.baseDetectionRange + (this.weapon ? this.weapon.detectionRangeBonus || 0 : 0); }

    // [ü™ì MODIFIED] ÎèÑÎÅº Ïø®ÌÉÄÏûÑ Ï°∞Ï†ï Ï∂îÍ∞Ä
    get cooldownTime() {
        let finalCooldown = this.baseCooldownTime + (this.weapon ? this.weapon.attackCooldownBonus || 0 : 0);
        finalCooldown *= (1 - (this.level - 1) * 0.04);

        if (this.weapon && this.weapon.type === 'fire_staff') return Math.max(20, Math.min(finalCooldown, 120));
        if (this.weapon && this.weapon.type === 'hadoken') return Math.max(20, Math.min(finalCooldown, 120));
        if (this.weapon && this.weapon.type === 'axe') return Math.max(20, Math.min(finalCooldown, 120)); // ÎèÑÎÅº Ïø®ÌÉÄÏûÑ Ï†úÌïú Ï∂îÍ∞Ä
        if (this.weapon && this.weapon.type === 'ice_diamond') return Math.max(20, Math.min(finalCooldown, 180));

        return Math.max(20, finalCooldown);
    }

    // ... (equipWeapon, levelUp, findClosest, applyPhysics, move, attack, takeDamage, handleDeath Ìï®ÏàòÎäî Ïù¥Ï†ÑÍ≥º ÎèôÏùº) ...
    equipWeapon(weaponType, isClone = false) {
        const gameManager = this.gameManager;
        if (!gameManager) return;

        this.weapon = gameManager.createWeapon(0, 0, weaponType);
        gameManager.audioManager.play('equip');
        if (this.weapon.type === 'crown' && !isClone) {
            this.isKing = true;
        }
        this.state = 'IDLE';
    }

    levelUp(killedUnitLevel = 0) {
        const previousLevel = this.level;
        let newLevel = this.level;

        if (killedUnitLevel > this.level) {
            newLevel = killedUnitLevel;
        } else {
            newLevel++;
        }

        this.level = Math.min(this.maxLevel, newLevel);

        if (this.level > previousLevel) {
            const levelGained = this.level - previousLevel;

            this.maxHp += 10 * levelGained;
            this.hp = Math.min(this.maxHp, this.hp + this.maxHp * 0.3);

            const weaponType = this.weapon ? this.weapon.type : null;
            const skillAttackWeapons = [
                'magic_dagger', 'poison_potion', 'ice_diamond', 'fire_staff',
                'magic_spear', 'boomerang', 'hadoken', 'shuriken', 'axe' // ÎèÑÎÅº Ï∂îÍ∞Ä
            ];

            if (skillAttackWeapons.includes(weaponType)) {
                if (weaponType === 'shuriken') {
                    this.specialAttackLevelBonus += 5 * levelGained;
                } else {
                    this.specialAttackLevelBonus += 10 * levelGained;
                }
            } else { // Í≤Ä, Ìôú Îì±
                this.baseAttackPower += 5 * levelGained;
            }

            this.gameManager.createEffect('level_up', this.pixelX, this.pixelY, this);
        }
    }

    findClosest(items) {
        let closestItem = null, minDistance = Infinity;
        for (const item of items) {
            const distance = Math.hypot(this.pixelX - item.pixelX, this.pixelY - item.pixelY);
            if (distance < minDistance) { minDistance = distance; closestItem = item; }
        }
        return { item: closestItem, distance: minDistance };
    }

    applyPhysics() {
        const gameManager = this.gameManager;
        if (!gameManager) return;

        if (this.knockbackX !== 0 || this.knockbackY !== 0) {
            const nextX = this.pixelX + this.knockbackX * gameManager.gameSpeed;
            const nextY = this.pixelY + this.knockbackY * gameManager.gameSpeed;

            const gridX = Math.floor(nextX / GRID_SIZE);
            const gridY = Math.floor(nextY / GRID_SIZE);

            if (gridY >= 0 && gridY < gameManager.ROWS && gridX >= 0 && gridX < gameManager.COLS) {
                const tile = gameManager.map[gridY][gridX];
                if (tile.type === TILE.WALL || tile.type === TILE.CRACKED_WALL || (tile.type === TILE.GLASS_WALL && !this.isBeingPulled)) {
                    this.knockbackX = 0;
                    this.knockbackY = 0;
                } else {
                    this.pixelX = nextX;
                    this.pixelY = nextY;
                }
            } else { // Îßµ Î∞ñÏúºÎ°ú Î∞ÄÎ†§ÎÇ† Í≤ΩÏö∞ (Ï≤òÎ¶¨ Î≥¥Í∞ï)
                this.pixelX = nextX;
                this.pixelY = nextY;
            }
        }

        this.knockbackX *= 0.9;
        this.knockbackY *= 0.9;
        if (Math.abs(this.knockbackX) < 0.1) this.knockbackX = 0;
        if (Math.abs(this.knockbackY) < 0.1) this.knockbackY = 0;

        // Ïú†Îãõ Í∞Ñ Ï∂©Îèå Ï≤òÎ¶¨
        gameManager.units.forEach(otherUnit => {
            if (this !== otherUnit) {
                const dx = otherUnit.pixelX - this.pixelX;
                const dy = otherUnit.pixelY - this.pixelY;
                const distance = Math.hypot(dx, dy);
                const minDistance = (GRID_SIZE / 1.67) * 2; // Ïú†Îãõ Î∞òÏßÄÎ¶Ñ * 2

                if (distance < minDistance && distance > 0) {
                    const angle = Math.atan2(dy, dx);
                    const overlap = minDistance - distance;
                    const moveX = (overlap / 2) * Math.cos(angle);
                    const moveY = (overlap / 2) * Math.sin(angle);

                    // Îã§Ïùå ÏòàÏÉÅ ÏúÑÏπò
                    const myNextX = this.pixelX - moveX;
                    const myNextY = this.pixelY - moveY;
                    const otherNextX = otherUnit.pixelX + moveX;
                    const otherNextY = otherUnit.pixelY + moveY;

                    // Îã§Ïùå ÏúÑÏπòÍ∞Ä Î≤ΩÏù∏ÏßÄ ÌôïÏù∏
                    const myGridX = Math.floor(myNextX / GRID_SIZE);
                    const myGridY = Math.floor(myNextY / GRID_SIZE);
                    const otherGridX = Math.floor(otherNextX / GRID_SIZE);
                    const otherGridY = Math.floor(otherNextY / GRID_SIZE);

                    const isMyNextPosWall = (myGridY < 0 || myGridY >= gameManager.ROWS || myGridX < 0 || myGridX >= gameManager.COLS) ||
                        (gameManager.map[myGridY][myGridX].type === TILE.WALL || gameManager.map[myGridY][myGridX].type === TILE.CRACKED_WALL);

                    const isOtherNextPosWall = (otherGridY < 0 || otherGridY >= gameManager.ROWS || otherGridX < 0 || otherGridX >= gameManager.COLS) ||
                        (gameManager.map[otherGridY][otherGridX].type === TILE.WALL || gameManager.map[otherGridY][otherGridX].type === TILE.CRACKED_WALL);

                    // Î≤ΩÏù¥ ÏïÑÎãàÎ©¥ ÏúÑÏπò Ï°∞Ï†ï
                    if (!isMyNextPosWall) {
                        this.pixelX = myNextX;
                        this.pixelY = myNextY;
                    }
                    if (!isOtherNextPosWall) {
                        otherUnit.pixelX = otherNextX;
                        otherUnit.pixelY = otherNextY;
                    }
                }
            }
        });

        // Îßµ Í≤ΩÍ≥Ñ Ï∂©Îèå Ï≤òÎ¶¨
        const radius = GRID_SIZE / 1.67; // Ïú†Îãõ Î∞òÏßÄÎ¶Ñ
        let bounced = false;
        if (this.pixelX < radius) {
            this.pixelX = radius;
            this.knockbackX = Math.abs(this.knockbackX) * 0.5 || 1; // ÌäïÍ≤®ÎÇòÍ∞ê
            bounced = true;
        } else if (this.pixelX > gameManager.canvas.width - radius) {
            this.pixelX = gameManager.canvas.width - radius;
            this.knockbackX = -Math.abs(this.knockbackX) * 0.5 || -1;
            bounced = true;
        }

        if (this.pixelY < radius) {
            this.pixelY = radius;
            this.knockbackY = Math.abs(this.knockbackY) * 0.5 || 1;
            bounced = true;
        } else if (this.pixelY > gameManager.canvas.height - radius) {
            this.pixelY = gameManager.canvas.height - radius;
            this.knockbackY = -Math.abs(this.knockbackY) * 0.5 || -1;
            bounced = true;
        }

        // ÌäïÍ≤®ÎÇòÍ∞îÍ≥† IDLE ÏÉÅÌÉúÎ©¥ Ïù¥Îèô Î™©Ìëú Ï¥àÍ∏∞Ìôî
        if (bounced && this.state === 'IDLE') {
            this.moveTarget = null;
        }
    }

    move() {
        if (!this.moveTarget || this.isCasting || this.isStunned > 0 || this.isAimingMagicDagger) return;
        const gameManager = this.gameManager;
        if (!gameManager) return;

        const dx = this.moveTarget.x - this.pixelX, dy = this.moveTarget.y - this.pixelY;
        const distance = Math.hypot(dx, dy);
        const currentSpeed = this.speed * gameManager.gameSpeed;
        if (distance < currentSpeed) {
            this.pixelX = this.moveTarget.x; this.pixelY = this.moveTarget.y;
            this.moveTarget = null; return;
        }

        let angle = Math.atan2(dy, dx);

        // Ïö©Ïïî ÌöåÌîº Î°úÏßÅ
        if (gameManager.isLavaAvoidanceEnabled && this.state !== 'FLEEING_FIELD' && this.state !== 'FLEEING_LAVA') {
            const lookAheadDist = GRID_SIZE * 1.2; // Ï°∞Í∏à Ïïû ÏòàÏ∏°
            const lookAheadX = this.pixelX + Math.cos(angle) * lookAheadDist;
            const lookAheadY = this.pixelY + Math.sin(angle) * lookAheadDist;

            const lookAheadGridX = Math.floor(lookAheadX / GRID_SIZE);
            const lookAheadGridY = Math.floor(lookAheadY / GRID_SIZE);

            // ÏòàÏ∏° ÏßÄÏ†êÏù¥ Ïö©ÏïîÏù¥Î©¥ Ïö∞Ìöå ÏãúÎèÑ
            if (gameManager.isPosInLavaForUnit(lookAheadGridX, lookAheadGridY)) {
                const detourAngle = Math.PI / 3; // 60ÎèÑ Ïö∞Ìöå Í∞ÅÎèÑ
                let bestAngle = -1;

                // Ï¢å/Ïö∞ Í∞ÅÎèÑ Í≥ÑÏÇ∞
                const leftAngle = angle - detourAngle;
                const rightAngle = angle + detourAngle;

                // Ï¢å/Ïö∞ ÏòàÏ∏° ÏßÄÏ†ê Í≥ÑÏÇ∞ Î∞è ÏïàÏ†Ñ ÌôïÏù∏
                const leftLookAheadX = this.pixelX + Math.cos(leftAngle) * lookAheadDist;
                const leftLookAheadY = this.pixelY + Math.sin(leftAngle) * lookAheadDist;
                const isLeftSafe = !gameManager.isPosInLavaForUnit(Math.floor(leftLookAheadX / GRID_SIZE), Math.floor(leftLookAheadY / GRID_SIZE));

                const rightLookAheadX = this.pixelX + Math.cos(rightAngle) * lookAheadDist;
                const rightLookAheadY = this.pixelY + Math.sin(rightAngle) * lookAheadDist;
                const isRightSafe = !gameManager.isPosInLavaForUnit(Math.floor(rightLookAheadX / GRID_SIZE), Math.floor(rightLookAheadY / GRID_SIZE));

                // ÏïàÏ†ÑÌïú Î∞©Ìñ• ÏÑ†ÌÉù (Îëò Îã§ ÏïàÏ†ÑÌïòÎ©¥ ÏõêÎûò Î∞©Ìñ•Í≥º Í∞ÄÍπåÏö¥ Ï™Ω)
                if (isLeftSafe && isRightSafe) {
                    bestAngle = Math.abs(leftAngle - angle) < Math.abs(rightAngle - angle) ? leftAngle : rightAngle;
                } else if (isLeftSafe) {
                    bestAngle = leftAngle;
                } else if (isRightSafe) {
                    bestAngle = rightAngle;
                }

                // ÏïàÏ†ÑÌïú Ïö∞Ìöå Í∞ÅÎèÑÍ∞Ä ÏûàÏúºÎ©¥ Ï†ÅÏö©
                if (bestAngle !== -1) {
                    angle = bestAngle;
                }
                // ÏïàÏ†ÑÌïú Î∞©Ìñ• ÏóÜÏúºÎ©¥ Í∑∏ÎÉ• ÏßÅÏßÑ (Ïñ¥Ï©î Ïàò ÏóÜÏù¥ Ïö©Ïïî ÌÜµÍ≥º)
            }
        }

        // Îã§Ïùå ÏúÑÏπò Í≥ÑÏÇ∞
        const nextPixelX = this.pixelX + Math.cos(angle) * currentSpeed;
        const nextPixelY = this.pixelY + Math.sin(angle) * currentSpeed;
        const nextGridX = Math.floor(nextPixelX / GRID_SIZE);
        const nextGridY = Math.floor(nextPixelY / GRID_SIZE);

        // Î≤Ω Ï∂©Îèå Ï≤òÎ¶¨
        if (nextGridY >= 0 && nextGridY < gameManager.ROWS && nextGridX >= 0 && nextGridX < gameManager.COLS) {
            const collidedTile = gameManager.map[nextGridY][nextGridX];
            if (collidedTile.type === TILE.WALL || collidedTile.type === TILE.CRACKED_WALL || collidedTile.type === TILE.GLASS_WALL) {
                if (collidedTile.type === TILE.CRACKED_WALL) { // Î∂ÄÏÑúÏßÄÎäî Î≤ΩÏù¥Î©¥ ÌååÍ¥¥ ÏãúÎèÑ
                    gameManager.damageTile(nextGridX, nextGridY, this.attackPower); // ÏïΩÌïú Îç∞ÎØ∏ÏßÄ
                }
                // Î≤ΩÏóê Î∂ÄÎî™ÌûàÎ©¥ ÌäïÍ≤®ÎÇòÍ∞ê
                const bounceAngle = this.facingAngle + Math.PI + (gameManager.random() - 0.5); // Î∞òÎåÄ Î∞©Ìñ• + ÎûúÎç§
                this.knockbackX += Math.cos(bounceAngle) * 1.5;
                this.knockbackY += Math.sin(bounceAngle) * 1.5;
                this.moveTarget = null; // Ïù¥Îèô Î™©Ìëú Ï†úÍ±∞
                return; // Ïù¥Îèô Ï§ëÏßÄ
            }
        } else { // Îßµ Î∞ñÏúºÎ°ú ÎÇòÍ∞ÄÎ†§Í≥† ÌïòÎ©¥
             // ÌäïÍ≤®ÎÇòÍ∞ê (applyPhysics ÏóêÏÑú Ï≤òÎ¶¨Îê† Í≤ÉÏûÑ)
             this.moveTarget = null;
             return;
        }

        // Ïù¥Îèô Î∞è Î∞©Ìñ• Ï†ÑÌôò
        this.facingAngle = angle;
        this.pixelX = nextPixelX;
        this.pixelY = nextPixelY;
    }

    attack(target) {
        if (!target || this.attackCooldown > 0 || this.isStunned > 0) return;
        if (this.isCasting && this.weapon && this.weapon.type !== 'poison_potion') return;

        const gameManager = this.gameManager;
        if (!gameManager) return;

        const targetGridX = Math.floor(target.pixelX / GRID_SIZE);
        const targetGridY = Math.floor(target.pixelY / GRID_SIZE);
        if (targetGridY < 0 || targetGridY >= gameManager.ROWS || targetGridX < 0 || targetGridX >= gameManager.COLS) return;

        const tile = gameManager.map[targetGridY][targetGridX];

        // Î∂ÄÏÑúÏßÄÎäî Î≤Ω Í≥µÍ≤©
        if (tile.type === TILE.CRACKED_WALL) {
            gameManager.damageTile(targetGridX, targetGridY, this.attackPower);
            this.attackCooldown = this.cooldownTime;
            this.attackAnimationTimer = 15; // Í≥µÍ≤© Ïï†ÎãàÎ©îÏù¥ÏÖò
        }
        // Ïú†Îãõ ÎòêÎäî ÎÑ•ÏÑúÏä§ Í≥µÍ≤©
        else if (target instanceof Unit || target instanceof Nexus) {
            if (this.weapon) { // Î¨¥Í∏∞ ÏÇ¨Ïö©
                this.weapon.use(this, target);
            } else { // Îß®ÏÜê Í≥µÍ≤©
                target.takeDamage(this.attackPower, {}, this);
                gameManager.audioManager.play('punch');
                this.attackCooldown = this.cooldownTime;
                this.attackAnimationTimer = 15; // Í≥µÍ≤© Ïï†ÎãàÎ©îÏù¥ÏÖò
            }
        }
    }

    takeDamage(damage, effectInfo = {}, attacker = null) {
        const gameManager = this.gameManager;
        // Îç∞ÎØ∏ÏßÄÍ∞Ä ÏûàÍ≥† ÌÉÄÏùº Îç∞ÎØ∏ÏßÄÍ∞Ä ÏïÑÎãàÎ©¥ ÌîºÍ≤© Ïù¥ÌéôÌä∏ ÏÉùÏÑ±
        if (gameManager && damage > 0 && !effectInfo.isTileDamage) {
            createPhysicalHitEffect(gameManager, this);
        }
        this.hp -= damage; // Ï≤¥Î†• Í∞êÏÜå
        this.hpBarVisibleTimer = 180; // Ï≤¥Î†•Î∞î ÌëúÏãú ÌÉÄÏù¥Î®∏ ÌôúÏÑ±Ìôî
        this.damageFlash = 1.0; // ÌîºÍ≤© Ïãú Ìù∞ÏÉâ ÍπúÎπ°ÏûÑ Ìö®Í≥º ÌôúÏÑ±Ìôî

        // ÎßàÏßÄÎßâ Í≥µÍ≤©Ïûê Í∏∞Î°ù
        if (attacker && attacker instanceof Unit) {
            this.killedBy = attacker;
        }
        // Ï≤¥Î†•Ïù¥ 0 Ïù¥ÌïòÍ∞Ä Îêú ÏàúÍ∞ÑÏùò Í≥µÍ≤©Ïûê Í∏∞Î°ù
        if (this.hp <= 0 && !this.killedBy && attacker) {
            this.killedBy = attacker;
        }

        // Ï∫êÏä§ÌåÖ Î∞©Ìï¥ Ìö®Í≥º
        if (effectInfo.interrupt) {
            // ÌëúÏ∞Ω, Î≤àÍ∞ú Ïô∏ Î¨¥Í∏∞ ÎòêÎäî Í∞ïÏ†ú Î∞©Ìï¥ Ïãú Ï∫êÏä§ÌåÖ Ï∑®ÏÜå
            if (!['shuriken', 'lightning'].includes(this.weapon?.type) || effectInfo.force > 0) {
                this.isCasting = false;
                this.castingProgress = 0;
            }
        }
        // ÎÑâÎ∞± Ìö®Í≥º
        if (effectInfo.force && effectInfo.force > 0) {
            this.knockbackX += Math.cos(effectInfo.angle) * effectInfo.force;
            this.knockbackY += Math.sin(effectInfo.angle) * effectInfo.force;
        }
        // Ïä§ÌÑ¥ Ìö®Í≥º
        if (effectInfo.stun) {
            if (this.isStunned <= 0) { // Ïä§ÌÑ¥Ïù¥ Ï≤òÏùå Í±∏Î¶¥ Îïå Ìö®Í≥ºÏùå Ïû¨ÏÉù
                gameManager.audioManager.play('stern');
            }
            this.isStunned = Math.max(this.isStunned, effectInfo.stun); // Ïä§ÌÑ¥ ÏãúÍ∞Ñ Í∞±Ïã† (Îçî Í∏¥ ÏãúÍ∞ÑÏúºÎ°ú)
            // ÎßàÎ≤ïÏßÑ Ïä§ÌÑ¥ Ïó¨Î∂Ä Í∏∞Î°ù
            if (effectInfo.stunSource === 'magic_circle') {
                this.stunnedByMagicCircle = true;
            }
        }
        // ÎèÖ Ìö®Í≥º
        if (effectInfo.poison) {
            this.poisonEffect.active = true;
            this.poisonEffect.duration = 180; // 3Ï¥à ÏßÄÏÜç
            this.poisonEffect.damage = effectInfo.poison.damage; // ÎèÖ Îç∞ÎØ∏ÏßÄ ÏÑ§Ï†ï
        }
        // ÎëîÌôî Ìö®Í≥º
        if (effectInfo.slow) {
            this.isSlowed = Math.max(this.isSlowed, effectInfo.slow); // ÎëîÌôî ÏãúÍ∞Ñ Í∞±Ïã†
        }
    }

    handleDeath() {
        const gameManager = this.gameManager;
        if (!gameManager) return;

        // ÎèÖ Ìè¨ÏÖò Ïú†Îãõ ÏÇ¨Îßù Ïãú ÎèÖÍµ¨Î¶Ñ ÏÉùÏÑ±
        if (this.weapon && this.weapon.type === 'poison_potion') {
            gameManager.castAreaSpell({ x: this.pixelX, y: this.pixelY }, 'poison_cloud', this.team, this.specialAttackLevelBonus);
        }
        // Ï∂îÍ∞ÄÏ†ÅÏù∏ ÏÇ¨Îßù Ï≤òÎ¶¨ Î°úÏßÅ (Ïòà: ÏïÑÏù¥ÌÖú ÎìúÎûç Îì±)ÏùÑ Ïó¨Í∏∞Ïóê Ï∂îÍ∞Ä Í∞ÄÎä•
    }


    update(enemies, weapons, projectiles) {
        const gameManager = this.gameManager;
        if (!gameManager) {
            return;
        }

        // Î∂ÄÎìúÎü¨Ïö¥ Ï≤¥Î†•Î∞î Í∞êÏÜå Î∞è ÌîºÍ≤© Ìö®Í≥º Ï≤òÎ¶¨
        if (this.displayHp > this.hp) {
            this.displayHp -= (this.displayHp - this.hp) * 0.1 * this.gameManager.gameSpeed; // Î∂ÄÎìúÎüΩÍ≤å Í∞êÏÜå
            if (this.displayHp < this.hp) this.displayHp = this.hp; // Ïã§Ï†ú Ï≤¥Î†•Î≥¥Îã§ ÎÇÆÏïÑÏßÄÏßÄ ÏïäÎèÑÎ°ù
        } else {
            this.displayHp = this.hp;
        }
        if (this.damageFlash > 0) {
            this.damageFlash -= 0.05 * this.gameManager.gameSpeed; // ÍπúÎπ°ÏûÑ Ìö®Í≥º Ï†êÏ∞® Í∞êÏÜå
        }


        // Î†àÎ≤®ÏóÖ ÌååÌã∞ÌÅ¥ Ìö®Í≥º (Î†àÎ≤® 2 Ïù¥ÏÉÅ, Î†àÎ≤®ÏóÖ ÏãúÏä§ÌÖú ÌôúÏÑ±Ìôî Ïãú)
        if (this.level >= 2 && gameManager.isLevelUpEnabled) {
            this.levelUpParticleCooldown -= gameManager.gameSpeed;
            if (this.levelUpParticleCooldown <= 0) {
                this.levelUpParticleCooldown = 15 - this.level; // Î†àÎ≤® ÎÜíÏùÑÏàòÎ°ù ÏûêÏ£º Î∞úÏÉù

                // ÌåÄ ÏÉâÏÉÅ Í∞ÄÏ†∏Ïò§Í∏∞
                let teamColor;
                switch(this.team) {
                    case TEAM.A: teamColor = DEEP_COLORS.TEAM_A; break;
                    case TEAM.B: teamColor = DEEP_COLORS.TEAM_B; break;
                    case TEAM.C: teamColor = DEEP_COLORS.TEAM_C; break;
                    case TEAM.D: teamColor = DEEP_COLORS.TEAM_D; break;
                    default: teamColor = '#FFFFFF'; break;
                }

                const particleCount = (this.level - 1) * 2; // Î†àÎ≤® ÎπÑÎ°Ä ÌååÌã∞ÌÅ¥ Ïàò
                for (let i = 0; i < particleCount; i++) {
                    const angle = gameManager.random() * Math.PI * 2;
                    const radius = GRID_SIZE / 1.67; // Ïú†Îãõ Î∞òÏßÄÎ¶Ñ
                    // Ïú†Îãõ Í∞ÄÏû•ÏûêÎ¶¨ÏóêÏÑú ÏÉùÏÑ±
                    const spawnX = this.pixelX + Math.cos(angle) * radius;
                    const spawnY = this.pixelY + Math.sin(angle) * radius;
                    const speed = 0.5 + gameManager.random() * 0.5; // ÎäêÎ¶∞ ÏÜçÎèÑ

                    // ÌååÌã∞ÌÅ¥ Ï∂îÍ∞Ä
                    gameManager.addParticle({
                        x: spawnX, y: spawnY,
                        vx: Math.cos(angle) * speed, vy: Math.sin(angle) * speed, // Î∞îÍπ•Ï™ΩÏúºÎ°ú ÌçºÏßê
                        life: 0.6, // ÏßßÏùÄ ÏàòÎ™Ö
                        color: teamColor,
                        size: this.level * 0.5 + gameManager.random() * this.level, // Î†àÎ≤® ÎπÑÎ°Ä ÌÅ¨Í∏∞
                        gravity: -0.02 // ÏÇ¥Ïßù ÏúÑÎ°ú Îñ†Ïò§Î¶Ñ
                    });
                }
            }
        }

        // ÎåÄÏãú ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        if (this.isDashing) {
            this.dashTrail.push({ x: this.pixelX, y: this.pixelY }); // Í∂§Ï†Å Ï∂îÍ∞Ä
            if (this.dashTrail.length > 5) this.dashTrail.shift(); // ÏµúÎåÄ 5Í∞ú Ïú†ÏßÄ

            // ÎåÄÏãú Î∞©Ìñ•Ïóê Îî∞Î•∏ Ïù¥ÎèôÎüâ Í≥ÑÏÇ∞
            let moveX = 0, moveY = 0;
            switch (this.dashDirection) {
                case 'RIGHT': moveX = this.dashSpeed; break;
                case 'LEFT': moveX = -this.dashSpeed; break;
                case 'DOWN': moveY = this.dashSpeed; break;
                case 'UP': moveY = -this.dashSpeed; break;
            }

            // Í≤åÏûÑ ÏÜçÎèÑÎßåÌÅº Î∞òÎ≥µÌïòÏó¨ Ïù¥Îèô Î∞è Ï∂©Îèå Ï≤òÎ¶¨
            for (let i = 0; i < gameManager.gameSpeed; i++) {
                const nextX = this.pixelX + moveX;
                const nextY = this.pixelY + moveY;
                const gridX = Math.floor(nextX / GRID_SIZE);
                const gridY = Math.floor(nextY / GRID_SIZE);

                // Îßµ Î∞ñÏúºÎ°ú ÎÇòÍ∞ÄÎ©¥ ÎåÄÏãú Ï§ëÏßÄ
                if (gridY < 0 || gridY >= gameManager.ROWS || gridX < 0 || gridX >= gameManager.COLS) {
                    this.isDashing = false;
                    break;
                }

                const tile = gameManager.map[gridY][gridX];
                // Î≤ΩÏóê Î∂ÄÎî™ÌûàÎ©¥ ÎåÄÏãú Ï§ëÏßÄ
                if (tile.type === TILE.WALL) {
                    this.isDashing = false;
                    break;
                }
                // Î∂ÄÏÑúÏßÄÎäî Î≤ΩÏùÄ ÌååÍ¥¥
                if (tile.type === TILE.CRACKED_WALL) {
                    gameManager.damageTile(gridX, gridY, 999);
                }

                // Ïù¥Îèô Î∞è ÎÇ®ÏùÄ Í±∞Î¶¨ Í∞êÏÜå
                this.pixelX = nextX;
                this.pixelY = nextY;
                this.dashDistanceRemaining -= this.dashSpeed;

                // Î™©Ìëú Í±∞Î¶¨ ÎèÑÎã¨ Ïãú ÎåÄÏãú Ï§ëÏßÄ
                if (this.dashDistanceRemaining <= 0) {
                    this.isDashing = false;
                    break;
                }
            }
            // ÎåÄÏãú ÎÅùÎÇòÎ©¥ Í∂§Ï†Å Ï†úÍ±∞
            if (!this.isDashing) this.dashTrail = [];
            return; // ÎåÄÏãú Ï§ëÏóêÎäî Îã§Î•∏ ÌñâÎèô X
        }

        // Ï≤¥Î†•Î∞î ÌëúÏãú ÌÉÄÏù¥Î®∏ Í∞êÏÜå
        if (this.hpBarVisibleTimer > 0) this.hpBarVisibleTimer--;

        // Î∂ÄÎ©îÎûëÏóê ÎÅåÎ†§Í∞ÄÎäî ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        if (this.isBeingPulled && this.puller) {
            const dx = this.pullTargetPos.x - this.pixelX;
            const dy = this.pullTargetPos.y - this.pixelY;
            const dist = Math.hypot(dx, dy);
            const pullSpeed = 4; // ÎÅåÎ†§Í∞ÄÎäî ÏÜçÎèÑ

            // Î™©Ìëú ÏßÄÏ†ê ÎèÑÎã¨ Ïãú
            if (dist < pullSpeed * gameManager.gameSpeed) {
                this.pixelX = this.pullTargetPos.x;
                this.pixelY = this.pullTargetPos.y;
                this.isBeingPulled = false; // ÏÉÅÌÉú Ï¢ÖÎ£å

                // Îç∞ÎØ∏ÏßÄ Î∞è Ïä§ÌÑ¥ Ï†ÅÏö©
                const damage = 20 + (this.puller.specialAttackLevelBonus || 0);
                this.takeDamage(damage, { stun: 120 }, this.puller);

                this.puller = null; // Î∂ÄÎ©îÎûë ÏãúÏ†ÑÏûê Ï†ïÎ≥¥ Ï†úÍ±∞
            } else { // Î™©Ìëú ÏßÄÏ†êÏúºÎ°ú Ïù¥Îèô
                const angle = Math.atan2(dy, dx);
                this.pixelX += Math.cos(angle) * pullSpeed * gameManager.gameSpeed;
                this.pixelY += Math.sin(angle) * pullSpeed * gameManager.gameSpeed;
                this.knockbackX = 0; // ÎÑâÎ∞± Î¨¥Ïãú
                this.knockbackY = 0;
            }
            this.applyPhysics(); // Ï∂©Îèå Ï≤òÎ¶¨
            return; // ÎÅåÎ†§Í∞ÄÎäî Ï§ëÏóêÎäî Îã§Î•∏ ÌñâÎèô X
        }

        // Ïä§ÌÑ¥ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        if (this.isStunned > 0) {
            this.isStunned -= gameManager.gameSpeed; // Ïä§ÌÑ¥ ÏãúÍ∞Ñ Í∞êÏÜå
            if (this.isStunned <= 0) {
                this.stunnedByMagicCircle = false; // ÎßàÎ≤ïÏßÑ Ïä§ÌÑ¥ Ìï¥Ï†ú
            }
            this.applyPhysics(); // Ï∂©Îèå Ï≤òÎ¶¨Îßå Ï†ÅÏö©
            return; // Ïä§ÌÑ¥ Ï§ëÏóêÎäî Îã§Î•∏ ÌñâÎèô X
        }

        // ÎëîÌôî ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        if (this.isSlowed > 0) {
            this.isSlowed -= gameManager.gameSpeed;
        }

        // ÏåçÍ≤Ä ÌëúÏãù ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        if (this.isMarkedByDualSword.active) {
            this.isMarkedByDualSword.timer -= gameManager.gameSpeed;
            if (this.isMarkedByDualSword.timer <= 0) {
                this.isMarkedByDualSword.active = false;
            }
        }

        // Í∞ÅÏÑ± Ìö®Í≥º ÏóÖÎç∞Ïù¥Ìä∏ (Ïä§ÌÉù Ï¶ùÍ∞Ä)
        if (this.awakeningEffect.active && this.awakeningEffect.stacks < 3) {
            this.awakeningEffect.timer += gameManager.gameSpeed;
            if (this.awakeningEffect.timer >= 300) { // 5Ï¥àÎßàÎã§ Ïä§ÌÉù Ï¶ùÍ∞Ä
                this.awakeningEffect.timer = 0;
                this.awakeningEffect.stacks++;
                this.maxHp += 20; // ÏµúÎåÄ Ï≤¥Î†• Ï¶ùÍ∞Ä
                this.hp = Math.min(this.maxHp, this.hp + 20); // Ï≤¥Î†• ÌöåÎ≥µ
                this.baseAttackPower += 3; // Í∏∞Î≥∏ Í≥µÍ≤©Î†• Ï¶ùÍ∞Ä
                gameManager.audioManager.play('Arousal'); // Ìö®Í≥ºÏùå Ïû¨ÏÉù
                // Í∞ÅÏÑ± ÌååÌã∞ÌÅ¥ Ìö®Í≥º
                for (let i = 0; i < 30; i++) { /* ... ÌååÌã∞ÌÅ¥ ÏÉùÏÑ± Î°úÏßÅ ... */ }
            }
        }

        // Ïø®ÌÉÄÏûÑ Í∞êÏÜå
        if (this.magicDaggerSkillCooldown > 0) this.magicDaggerSkillCooldown -= gameManager.gameSpeed;
        if (this.axeSkillCooldown > 0) this.axeSkillCooldown -= gameManager.gameSpeed; // [ü™ì ADDED] ÎèÑÎÅº Ïø®Îã§Ïö¥ Í∞êÏÜå
        if (this.spinAnimationTimer > 0) this.spinAnimationTimer -= gameManager.gameSpeed;
        if (this.swordSpecialAttackAnimationTimer > 0) this.swordSpecialAttackAnimationTimer -= gameManager.gameSpeed;
        if (this.dualSwordSkillCooldown > 0) this.dualSwordSkillCooldown -= gameManager.gameSpeed;
        if (this.dualSwordTeleportDelayTimer > 0) this.dualSwordTeleportDelayTimer -= gameManager.gameSpeed;
        if (this.dualSwordSpinAttackTimer > 0) this.dualSwordSpinAttackTimer -= gameManager.gameSpeed;
        if (this.attackCooldown > 0) this.attackCooldown -= gameManager.gameSpeed;
        if (this.teleportCooldown > 0) this.teleportCooldown -= gameManager.gameSpeed;
        if (this.alertedCounter > 0) this.alertedCounter -= gameManager.gameSpeed;
        if (this.isKing && this.spawnCooldown > 0) this.spawnCooldown -= gameManager.gameSpeed;
        if (this.evasionCooldown > 0) this.evasionCooldown -= gameManager.gameSpeed;
        if (this.attackAnimationTimer > 0) this.attackAnimationTimer -= gameManager.gameSpeed;
        if (this.magicCircleCooldown > 0) this.magicCircleCooldown -= gameManager.gameSpeed;
        if (this.boomerangCooldown > 0) this.boomerangCooldown -= gameManager.gameSpeed;
        if (this.shurikenSkillCooldown > 0) this.shurikenSkillCooldown -= gameManager.gameSpeed;
        if (this.fireStaffSpecialCooldown > 0) this.fireStaffSpecialCooldown -= gameManager.gameSpeed;
        if (this.fleeingCooldown > 0) this.fleeingCooldown -= gameManager.gameSpeed;

        // ÌäπÏàò Í≥µÍ≤© Ï§ÄÎπÑ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏
        this.updateSpecialAttackReadyStatus();

        // ÌöåÌîº Î°úÏßÅ (ÌëúÏ∞Ω, Î≤àÍ∞ú Î¨¥Í∏∞)
        if (this.weapon && (this.weapon.type === 'shuriken' || this.weapon.type === 'lightning') && this.evasionCooldown <= 0) {
            for (const p of projectiles) {
                if (p.owner.team === this.team) continue; // ÏïÑÍµ∞ Ìà¨ÏÇ¨Ï≤¥ Î¨¥Ïãú
                const dist = Math.hypot(this.pixelX - p.pixelX, this.pixelY - p.pixelY);
                // Í∞ÄÍπåÏö¥ Ï†Å Ìà¨ÏÇ¨Ï≤¥ Í∞êÏßÄ
                if (dist < GRID_SIZE * 3) {
                    const angleToUnit = Math.atan2(this.pixelY - p.pixelY, this.pixelX - p.pixelX);
                    const angleDiff = Math.abs(angleToUnit - p.angle); // Í∞ÅÎèÑ Ï∞®Ïù¥
                    // ÏûêÏã†ÏùÑ Ìñ•Ìï¥ ÎÇ†ÏïÑÏò§Îäî Ìà¨ÏÇ¨Ï≤¥ Í∞êÏßÄ (45ÎèÑ Ïù¥ÎÇ¥)
                    if (angleDiff < Math.PI / 4 || angleDiff > Math.PI * 1.75) {
                        if (gameManager.random() > 0.5) { // 50% ÌôïÎ•†Î°ú ÌöåÌîº
                            // Ìà¨ÏÇ¨Ï≤¥ Î∞©Ìñ•Í≥º ÏàòÏßÅÏúºÎ°ú ÌöåÌîº (Ï¢å ÎòêÎäî Ïö∞ ÎûúÎç§)
                            const dodgeAngle = p.angle + (Math.PI / 2) * (gameManager.random() < 0.5 ? 1 : -1);
                            const dodgeForce = 4; // ÌöåÌîº ÎÑâÎ∞± Í∞ïÎèÑ
                            this.knockbackX += Math.cos(dodgeAngle) * dodgeForce;
                            this.knockbackY += Math.sin(dodgeAngle) * dodgeForce;
                            this.evasionCooldown = 30; // 0.5Ï¥à ÌöåÌîº Ïø®ÌÉÄÏûÑ
                            break; // Ìïú Î≤àÎßå ÌöåÌîº
                        }
                    }
                }
            }
        }

        // ÎèÖ Ìö®Í≥º ÏóÖÎç∞Ïù¥Ìä∏
        if (this.poisonEffect.active) {
            this.poisonEffect.duration -= gameManager.gameSpeed; // ÏßÄÏÜç ÏãúÍ∞Ñ Í∞êÏÜå
            this.takeDamage(this.poisonEffect.damage * gameManager.gameSpeed, { isTileDamage: true }); // ÎèÖ Îç∞ÎØ∏ÏßÄ Ï†ÅÏö©
            if (this.poisonEffect.duration <= 0) {
                this.poisonEffect.active = false; // Ìö®Í≥º Ï¢ÖÎ£å
            }
        }

        // ÏñºÏùå Îã§Ïù¥ÏïÑ Ï∂©Ï†Ñ ÏóÖÎç∞Ïù¥Ìä∏
        if (this.weapon && this.weapon.type === 'ice_diamond') {
            if (this.iceDiamondCharges < 5) { // ÏµúÎåÄ 5Í∞ú Ï∂©Ï†Ñ
                this.iceDiamondChargeTimer += gameManager.gameSpeed;
                if (this.iceDiamondChargeTimer >= 240) { // 4Ï¥àÎßàÎã§ Ï∂©Ï†Ñ
                    this.iceDiamondCharges++;
                    this.iceDiamondChargeTimer = 0;
                }
            }
        }

        // ÏåçÍ≤Ä ÏàúÍ∞ÑÏù¥Îèô ÎîúÎ†àÏù¥ ÏóÖÎç∞Ïù¥Ìä∏
        if (this.dualSwordTeleportDelayTimer > 0) {
            this.dualSwordTeleportDelayTimer -= gameManager.gameSpeed;
            if (this.dualSwordTeleportDelayTimer <= 0) { // ÎîúÎ†àÏù¥ ÎÅùÎÇòÎ©¥ Í≥µÍ≤© Ïã§Ìñâ
                this.performDualSwordTeleportAttack(enemies);
            }
        }

        // Ïôï Ïú†Îãõ Ïä§Ìè∞ Ï≤òÎ¶¨
        if (this.isKing && this.spawnCooldown <= 0) {
            this.spawnCooldown = this.spawnInterval; // Ïä§Ìè∞ Ïø®ÌÉÄÏûÑ Ï¥àÍ∏∞Ìôî
            gameManager.spawnUnit(this, false); // Ïú†Îãõ Ïä§Ìè∞ (Î¨¥Í∏∞ Î≥µÏ†ú X)
        }

        // Ï∫êÏä§ÌåÖ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ (ÎèÖ Ìè¨ÏÖò ÏûêÌè≠)
        if (this.isCasting) {
            this.castingProgress += gameManager.gameSpeed; // Ï∫êÏä§ÌåÖ ÏßÑÌñâ
            // ÌÉÄÍ≤üÏù¥ Ï£ΩÍ±∞ÎÇò ÏóÜÏñ¥ÏßÄÎ©¥ Ï∫êÏä§ÌåÖ Ï∑®ÏÜå
            if (!this.target || (this.target instanceof Unit && this.target.hp <= 0)) {
                this.isCasting = false; this.castingProgress = 0; return;
            }
            // Ï∫êÏä§ÌåÖ ÏôÑÎ£å Ïãú
            if (this.castingProgress >= this.castDuration) {
                this.isCasting = false; this.castingProgress = 0;
                if (this.weapon.type === 'poison_potion') {
                    gameManager.audioManager.play('poison'); // poison Ìö®Í≥ºÏùå
                    this.hp = 0; // ÏûêÌè≠
                    // ÏÇ¨Îßù Ï≤òÎ¶¨Îäî handleDeathÏóêÏÑú Ìï® (ÎèÖÍµ¨Î¶Ñ ÏÉùÏÑ±)
                }
                // Îã§Î•∏ Ï∫êÏä§ÌåÖ Ïä§ÌÇ¨ Ï∂îÍ∞Ä Í∞ÄÎä•
            }
            this.applyPhysics(); // Ï∂©Îèå Ï≤òÎ¶¨Îßå Ï†ÅÏö©
            return; // Ï∫êÏä§ÌåÖ Ï§ëÏóêÎäî Îã§Î•∏ ÌñâÎèô X
        }

        // --- Ïä§ÌÇ¨ ÏÇ¨Ïö© Î°úÏßÅ ---
        // ÎßàÎ≤ï Îã®Í≤Ä Ïä§ÌÇ¨ (Ï°∞Ï§Ä ÏãúÏûë)
        if (this.weapon && this.weapon.type === 'magic_dagger' && !this.isAimingMagicDagger && this.magicDaggerSkillCooldown <= 0 && this.attackCooldown <= 0) {
            const { item: closestEnemy } = this.findClosest(enemies);
            if (closestEnemy && gameManager.hasLineOfSight(this, closestEnemy)) {
                const dist = Math.hypot(this.pixelX - closestEnemy.pixelX, this.pixelY - closestEnemy.pixelY);
                if (dist < this.detectionRange) { // ÌÉêÏßÄ Î≤îÏúÑ ÎÇ¥ Ï†Å Î∞úÍ≤¨ Ïãú
                    this.isAimingMagicDagger = true; // Ï°∞Ï§Ä ÏãúÏûë
                    this.magicDaggerAimTimer = 60; // 1Ï¥à Ï°∞Ï§Ä ÏãúÍ∞Ñ
                    const angle = Math.atan2(closestEnemy.pixelY - this.pixelY, closestEnemy.pixelX - this.pixelX);
                    const dashDistance = GRID_SIZE * 4; // ÎåÄÏãú Í±∞Î¶¨
                    this.magicDaggerTargetPos = { // Î™©Ìëú ÏúÑÏπò Í≥ÑÏÇ∞
                        x: this.pixelX + Math.cos(angle) * dashDistance,
                        y: this.pixelY + Math.sin(angle) * dashDistance
                    };
                }
            }
        }
        // ÎßàÎ≤ï Îã®Í≤Ä Ïä§ÌÇ¨ (Ï°∞Ï§Ä Ï§ë Î∞è Î∞úÎèô)
        if (this.isAimingMagicDagger) {
            this.magicDaggerAimTimer -= gameManager.gameSpeed;
            if (this.magicDaggerAimTimer <= 0) { // Ï°∞Ï§Ä ÏãúÍ∞Ñ ÎÅùÎÇòÎ©¥ Î∞úÎèô
                this.isAimingMagicDagger = false;
                this.magicDaggerSkillCooldown = 420; // Ïä§ÌÇ¨ Ïø®ÌÉÄÏûÑ (7Ï¥à)
                this.attackCooldown = 30; // Í≥µÍ≤© ÌõÑ ÎîúÎ†àÏù¥

                const startPos = { x: this.pixelX, y: this.pixelY };
                const endPos = this.magicDaggerTargetPos;

                // Í≤ΩÎ°úÏÉÅ Ï†ÅÏóêÍ≤å Îç∞ÎØ∏ÏßÄ Î∞è Ïä§ÌÑ¥
                enemies.forEach(enemy => { /* ... Îç∞ÎØ∏ÏßÄ Î°úÏßÅ ... */ });

                // Î™©Ìëú ÏúÑÏπòÎ°ú ÏàúÍ∞ÑÏù¥Îèô
                this.pixelX = endPos.x;
                this.pixelY = endPos.y;

                // Ïù¥ÌéôÌä∏ Î∞è Ìö®Í≥ºÏùå
                gameManager.effects.push(new MagicDaggerDashEffect(gameManager, startPos, endPos));
                gameManager.audioManager.play('magicdagger');
                // ÌååÌã∞ÌÅ¥
                for (let i = 0; i < 15; i++) { /* ... ÌååÌã∞ÌÅ¥ ÏÉùÏÑ± Î°úÏßÅ ... */ }
                return; // Ïä§ÌÇ¨ ÏÇ¨Ïö© ÌõÑ Ï¢ÖÎ£å
            }
        }
        // ÎßàÎ≤ïÏ∞Ω Ïä§ÌÇ¨ (ÎßàÎ≤ïÏßÑ Ïä§ÌÑ¥ Ïó∞Í≥Ñ)
        else if (this.weapon && this.weapon.type === 'magic_spear') {
             // ÎßàÎ≤ïÏßÑ ÏÉùÏÑ± (Ïø®ÌÉÄÏûÑ Í¥ÄÎ¶¨)
            if (this.magicCircleCooldown <= 0) {
                gameManager.spawnMagicCircle(this.team);
                this.magicCircleCooldown = 300; // 5Ï¥à
            }
            // Ïä§ÌÑ¥Îêú Ï†Å Í≥µÍ≤©
            const stunnedEnemy = gameManager.findStunnedByMagicCircleEnemy(this.team);
            if (stunnedEnemy && this.attackCooldown <= 0) {
                this.alertedCounter = 60; // Í≤ΩÍ≥Ñ ÏÉÅÌÉú
                this.target = stunnedEnemy;
                gameManager.createProjectile(this, stunnedEnemy, 'magic_spear_special'); // ÌäπÏàò Í≥µÍ≤© Î∞úÏÇ¨
                gameManager.audioManager.play('spear');
                this.attackCooldown = this.cooldownTime; // Ïø®ÌÉÄÏûÑ Ï†ÅÏö©
                return; // Ïä§ÌÇ¨ ÏÇ¨Ïö© ÌõÑ Ï¢ÖÎ£å
            }
        }
        // Î∂ÄÎ©îÎûë Ïä§ÌÇ¨ (ÎÅåÏñ¥ÎãπÍ∏∞Í∏∞)
        else if (this.weapon && this.weapon.type === 'boomerang' && this.boomerangCooldown <= 0) {
            const { item: closestEnemy } = this.findClosest(enemies);
            if (closestEnemy && gameManager.hasLineOfSight(this, closestEnemy)) {
                const dist = Math.hypot(this.pixelX - closestEnemy.pixelX, this.pixelY - closestEnemy.pixelY);
                if (dist <= this.attackRange) { // ÏÇ¨Í±∞Î¶¨ ÎÇ¥ Ï†Å Î∞úÍ≤¨ Ïãú
                    this.boomerangCooldown = 480; // Ïä§ÌÇ¨ Ïø®ÌÉÄÏûÑ (8Ï¥à)
                    gameManager.createProjectile(this, closestEnemy, 'boomerang_projectile'); // ÌäπÏàò Î∂ÄÎ©îÎûë Î∞úÏÇ¨
                    gameManager.audioManager.play('boomerang');
                    this.state = 'IDLE'; // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
                    this.moveTarget = null;
                    this.attackCooldown = 60; // Í≥µÍ≤© ÌõÑ ÎîúÎ†àÏù¥
                    this.applyPhysics(); // Ï∂©Îèå Ï≤òÎ¶¨
                    return; // Ïä§ÌÇ¨ ÏÇ¨Ïö© ÌõÑ Ï¢ÖÎ£å
                }
            }
        }
        // [ü™ì ADDED] ÎèÑÎÅº Ïä§ÌÇ¨ (ÌöåÏ†Ñ Î≤†Í∏∞)
        else if (this.weapon && this.weapon.type === 'axe' && this.axeSkillCooldown <= 0) {
            const { item: closestEnemy } = this.findClosest(enemies);
            // Í∑ºÏ†ëÌïú Ï†ÅÏù¥ ÏûàÏùÑ Îïå Î∞úÎèô
            if (closestEnemy && Math.hypot(this.pixelX - closestEnemy.pixelX, this.pixelY - closestEnemy.pixelY) < GRID_SIZE * 3) {
                this.axeSkillCooldown = 240; // Ïä§ÌÇ¨ Ïø®ÌÉÄÏûÑ (4Ï¥à)
                this.spinAnimationTimer = 30; // ÌöåÏ†Ñ Ïï†ÎãàÎ©îÏù¥ÏÖò ÌÉÄÏù¥Î®∏ (0.5Ï¥à)
                gameManager.audioManager.play('axe'); // axe Ìö®Í≥ºÏùå
                gameManager.createEffect('axe_spin_effect', this.pixelX, this.pixelY, this); // ÌöåÏ†Ñ Ïù¥ÌéôÌä∏ ÏÉùÏÑ±

                // Ï£ºÎ≥Ä Î≤îÏúÑ Îç∞ÎØ∏ÏßÄ
                const damageRadius = GRID_SIZE * 3.5;
                enemies.forEach(enemy => {
                    if (Math.hypot(this.pixelX - enemy.pixelX, this.pixelY - enemy.pixelY) < damageRadius) {
                        enemy.takeDamage(this.attackPower * 1.5 + this.specialAttackLevelBonus, {}, this); // Î†àÎ≤® Î≥¥ÎÑàÏä§ Ï∂îÍ∞Ä
                    }
                });
                // ÎÑ•ÏÑúÏä§ÏóêÎèÑ Îç∞ÎØ∏ÏßÄ
                gameManager.nexuses.forEach(nexus => {
                    if (nexus.team !== this.team && !nexus.isDestroying && Math.hypot(this.pixelX - nexus.pixelX, this.pixelY - nexus.pixelY) < damageRadius) {
                        nexus.takeDamage(this.attackPower * 1.5 + this.specialAttackLevelBonus); // Î†àÎ≤® Î≥¥ÎÑàÏä§ Ï∂îÍ∞Ä
                    }
                });
                // ÏùºÎ∞ò Í≥µÍ≤© Ìö®Í≥ºÏùåÎèÑ Ïû¨ÏÉù (ÌÉÄÍ≤©Í∞ê)
                gameManager.audioManager.play('swordHit');
                this.attackCooldown = this.cooldownTime; // Í≥µÍ≤© Ïø®ÌÉÄÏûÑ Ï†ÅÏö©
                return; // Ïä§ÌÇ¨ ÏÇ¨Ïö© ÌõÑ Ï¢ÖÎ£å
            }
        }
        // ÌëúÏ∞Ω Ïä§ÌÇ¨ (3Î∞©Ìñ• Î∞úÏÇ¨)
        else if (this.weapon && this.weapon.type === 'shuriken' && this.shurikenSkillCooldown <= 0) {
             const { item: closestEnemy } = this.findClosest(enemies);
             if (closestEnemy && gameManager.hasLineOfSight(this, closestEnemy)) {
                 const dist = Math.hypot(this.pixelX - closestEnemy.pixelX, this.pixelY - closestEnemy.pixelY);
                 if (dist <= this.attackRange) { // ÏÇ¨Í±∞Î¶¨ ÎÇ¥
                     this.weapon.use(this, closestEnemy); // use Ìï®ÏàòÏóêÏÑú Ïä§ÌÇ¨ Î∞úÎèô
                     return; // Ïä§ÌÇ¨ ÏÇ¨Ïö© ÌõÑ Ï¢ÖÎ£å
                 }
             }
        }
        // Î∂à ÏßÄÌå°Ïù¥ Ïä§ÌÇ¨ (ÌôîÏóºÍµ¨)
        else if (this.weapon && this.weapon.type === 'fire_staff' && this.fireStaffSpecialCooldown <= 0) {
            const { item: closestEnemy } = this.findClosest(enemies);
             if (closestEnemy && gameManager.hasLineOfSight(this, closestEnemy)) {
                 const dist = Math.hypot(this.pixelX - closestEnemy.pixelX, this.pixelY - closestEnemy.pixelY);
                 if (dist <= this.attackRange) { // ÏÇ¨Í±∞Î¶¨ ÎÇ¥
                    gameManager.createProjectile(this, closestEnemy, 'fireball_projectile'); // ÌôîÏóºÍµ¨ Î∞úÏÇ¨
                    gameManager.audioManager.play('fireball');
                    this.fireStaffSpecialCooldown = 240; // Ïø®ÌÉÄÏûÑ (4Ï¥à)
                    this.attackCooldown = 60; // Í≥µÍ≤© ÌõÑ ÎîúÎ†àÏù¥
                    return; // Ïä§ÌÇ¨ ÏÇ¨Ïö© ÌõÑ Ï¢ÖÎ£å
                 }
             }
        }
        // ÏåçÍ≤Ä Ïä§ÌÇ¨ (ÌäïÍ∏∞Îäî Í≤Ä + ÏàúÍ∞ÑÏù¥Îèô)
        else if (this.weapon && this.weapon.type === 'dual_swords' && this.dualSwordSkillCooldown <= 0) {
             const { item: closestEnemy } = this.findClosest(enemies);
             if (closestEnemy && gameManager.hasLineOfSight(this, closestEnemy)) {
                 const distanceToTarget = Math.hypot(this.pixelX - closestEnemy.pixelX, this.pixelY - closestEnemy.pixelY);
                 if (distanceToTarget <= this.detectionRange * 1.2) { // ÌÉêÏßÄ Î≤îÏúÑÎ≥¥Îã§ ÎÑìÍ≤å
                     gameManager.audioManager.play('shurikenShoot'); // ÏûÑÏãú Ìö®Í≥ºÏùå
                     gameManager.createProjectile(this, closestEnemy, 'bouncing_sword'); // ÌäïÍ∏∞Îäî Í≤Ä Î∞úÏÇ¨
                     this.dualSwordSkillCooldown = 300; // Ïø®ÌÉÄÏûÑ (5Ï¥à)
                     this.attackCooldown = 60; // Í≥µÍ≤© ÌõÑ ÎîúÎ†àÏù¥
                     this.moveTarget = null; // Ïù¥Îèô Î©àÏ∂§
                     this.facingAngle = Math.atan2(closestEnemy.pixelY - this.pixelY, closestEnemy.pixelX - this.pixelX); // Î∞©Ìñ• Ï†ÑÌôò
                     return; // Ïä§ÌÇ¨ ÏÇ¨Ïö© ÌõÑ Ï¢ÖÎ£å
                 }
             }
        }


        // --- ÏÉÅÌÉú Í≤∞Ï†ï Î°úÏßÅ (Ïä§ÌÇ¨ ÏÇ¨Ïö© Ïïà ÌñàÏùÑ Í≤ΩÏö∞) ---
        let newState = 'IDLE';
        let newTarget = null;
        let targetEnemyForAlert = null;

        const currentGridXBeforeMove = Math.floor(this.pixelX / GRID_SIZE);
        const currentGridYBeforeMove = Math.floor(this.pixelY / GRID_SIZE);
        this.isInMagneticField = gameManager.isPosInAnyField(currentGridXBeforeMove, currentGridYBeforeMove);
        this.isInLava = gameManager.isPosInLavaForUnit(currentGridXBeforeMove, currentGridYBeforeMove);

        // ÏûêÍ∏∞Ïû•/Ïö©Ïïî ÌöåÌîº Ïö∞ÏÑ†
        if (this.isInMagneticField) { /* ... ÌöåÌîº Î°úÏßÅ ... */ }
        else if (gameManager.isLavaAvoidanceEnabled && this.isInLava) { /* ... ÌöåÌîº Î°úÏßÅ ... */ }
        // ÌöåÌîº ÌïÑÏöî ÏóÜÏùÑ Îïå
        else if (this.fleeingCooldown <= 0) {
            /* ... Ï†Å/ÎÑ•ÏÑúÏä§/Î¨¥Í∏∞/ÌÉÄÏùº ÌÉêÏÉâ Î∞è ÏÉÅÌÉú Í≤∞Ï†ï Î°úÏßÅ (Ïù¥Ï†ÑÍ≥º ÎèôÏùº) ... */
             const enemyNexus = gameManager.nexuses.find(n => n.team !== this.team && !n.isDestroying);
            const { item: closestEnemy, distance: enemyDist } = this.findClosest(enemies);
            const visibleWeapons = weapons.filter(w => !w.isEquipped && gameManager.hasLineOfSightForWeapon(this, w));
            const { item: targetWeapon, distance: weaponDist } = this.findClosest(visibleWeapons);
            let closestQuestionMark = null;
            let questionMarkDist = Infinity;
            if (!this.weapon) {
                const questionMarkTiles = gameManager.getTilesOfType(TILE.QUESTION_MARK);
                const questionMarkPositions = questionMarkTiles.map(pos => ({ pixelX: pos.x * GRID_SIZE + GRID_SIZE / 2, pixelY: pos.y * GRID_SIZE + GRID_SIZE / 2 }));
                ({ item: closestQuestionMark, distance: questionMarkDist } = this.findClosest(questionMarkPositions));
            }
            let targetEnemy = null;
            if (closestEnemy && enemyDist <= this.detectionRange && gameManager.hasLineOfSight(this, closestEnemy)) {
                targetEnemy = closestEnemy;
                targetEnemyForAlert = closestEnemy;
            }

            if (this.isKing && targetEnemy) {
                newState = 'FLEEING'; newTarget = targetEnemy;
            } else if (this.hp < this.maxHp / 2) {
                const healPacks = gameManager.getTilesOfType(TILE.HEAL_PACK);
                if (healPacks.length > 0) {
                    const healPackPositions = healPacks.map(pos => ({ pixelX: pos.x * GRID_SIZE + GRID_SIZE / 2, pixelY: pos.y * GRID_SIZE + GRID_SIZE / 2 }));
                    const { item: closestPack, distance: packDist } = this.findClosest(healPackPositions);
                    if (closestPack && packDist < this.detectionRange * 1.5) {
                        newState = 'SEEKING_HEAL_PACK'; newTarget = closestPack;
                    }
                }
            }

            if (newState === 'IDLE') {
                 if (closestQuestionMark && questionMarkDist <= this.detectionRange) {
                    newState = 'SEEKING_QUESTION_MARK'; newTarget = closestQuestionMark;
                } else if (!this.weapon && targetWeapon && weaponDist <= this.detectionRange) {
                    newState = 'SEEKING_WEAPON'; newTarget = targetWeapon;
                } else if (targetEnemy) {
                    newState = 'AGGRESSIVE'; newTarget = targetEnemy;
                } else if (enemyNexus && gameManager.hasLineOfSight(this, enemyNexus) && Math.hypot(this.pixelX - enemyNexus.pixelX, this.pixelY - enemyNexus.pixelY) <= this.detectionRange) {
                    newState = 'ATTACKING_NEXUS'; newTarget = enemyNexus;
                }
            }
        }
        // ÌöåÌîº Ïø®ÌÉÄÏûÑ Ï§ë
        else { /* ... Ïù¥Ï†Ñ ÏÉÅÌÉú Ïú†ÏßÄ Î°úÏßÅ ... */ }

        // ÏÉÅÌÉú Î≥ÄÍ≤Ω Ïãú Í≤ΩÍ≥Ñ ÏÉÅÌÉú ÌôúÏÑ±Ìôî
        if (this.state !== newState && newState !== 'IDLE' && newState !== 'FLEEING_FIELD' && newState !== 'FLEEING_LAVA') {
             if (!(this.weapon && this.weapon.type === 'magic_spear' && this.target instanceof Unit && this.target.stunnedByMagicCircle)) {
                this.alertedCounter = 60;
            }
        }
        this.state = newState;
        this.target = newTarget;

        // --- ÏÉÅÌÉúÎ≥Ñ ÌñâÎèô Ï≤òÎ¶¨ (Ïù¥Ï†ÑÍ≥º ÎèôÏùº) ---
        switch (this.state) { /* ... Í∞Å ÏÉÅÌÉúÎ≥Ñ moveTarget ÏÑ§Ï†ï Î∞è ÌñâÎèô Î°úÏßÅ ... */ }

        // Ïù¥Îèô Ïã§Ìñâ
        this.move();

        // Î¨ºÎ¶¨ Ìö®Í≥º Ï†ÅÏö©
        this.applyPhysics();

        // Ïú†Îãõ ÎßâÌûò Í∞êÏßÄ Î∞è Ï≤òÎ¶¨
        /* ... ÎßâÌûò Ï≤òÎ¶¨ Î°úÏßÅ ... */

        // ÌòÑÏû¨ ÏúÑÏπò ÌÉÄÏùº Ìö®Í≥º Ï≤òÎ¶¨
        /* ... ÌÉÄÏùº Ìö®Í≥º Ï≤òÎ¶¨ Î°úÏßÅ (ÌöåÎ≥µ, ÌÖîÌè¨, Î≥µÏ†ú, Î¨ºÏùåÌëú, ÎèåÏßÑ, Í∞ÅÏÑ± Îì±) ... */
    }


    // [ü™ì MODIFIED] ÌäπÏàò Í≥µÍ≤© Ï§ÄÎπÑ ÏÉÅÌÉú ÏóÖÎç∞Ïù¥Ìä∏ Ìï®Ïàò (ÎèÑÎÅº Ï∂îÍ∞Ä)
    updateSpecialAttackReadyStatus() {
        if (!this.weapon) {
            this.isSpecialAttackReady = false;
            return;
        }

        switch (this.weapon.type) {
            case 'sword':
            case 'bow':
                this.isSpecialAttackReady = this.attackCount >= 2;
                break;
            case 'boomerang':
                this.isSpecialAttackReady = this.boomerangCooldown <= 0;
                break;
            case 'shuriken':
                this.isSpecialAttackReady = this.shurikenSkillCooldown <= 0;
                break;
            case 'fire_staff':
                this.isSpecialAttackReady = this.fireStaffSpecialCooldown <= 0;
                break;
            case 'magic_dagger':
                this.isSpecialAttackReady = this.magicDaggerSkillCooldown <= 0;
                break;
            case 'dual_swords':
                this.isSpecialAttackReady = this.dualSwordSkillCooldown <= 0;
                break;
            case 'axe': // [ü™ì ADDED] ÎèÑÎÅº Ï∂îÍ∞Ä
                this.isSpecialAttackReady = this.axeSkillCooldown <= 0;
                break;
            default:
                this.isSpecialAttackReady = false;
        }
    }

    // [üé® REMOVED] draw Ìï®Ïàò ÎÇ¥ Îπõ Ïù¥ÌéôÌä∏ Í∑∏Î¶¨Îäî Î°úÏßÅ Ï†úÍ±∞ (weaponary.jsÎ°ú Ïù¥Îèô)
    draw(ctx, isOutlineEnabled, outlineWidth) {
        const gameManager = this.gameManager;
        if (!gameManager) return;

        // --- Ïú†Îãõ Í∏∞Î≥∏ Í∑∏Î¶¨Í∏∞, ÌÅ¨Í∏∞ Ï°∞Ï†ï, ÏÉÅÌÉú Ìö®Í≥º Îì± (Ïù¥Ï†ÑÍ≥º ÎèôÏùº) ---
        ctx.save();
        const scale = 1 + this.awakeningEffect.stacks * 0.2;
        const levelScale = 1 + (this.level - 1) * 0.08;
        const totalScale = scale * levelScale;

        // Í∞ÅÏÑ± Ïò§Îùº
        if (this.awakeningEffect.active) { /* ... Ïò§Îùº Í∑∏Î¶¨Í∏∞ ... */ }
        // ÎßàÎ≤ï Îã®Í≤Ä Ï°∞Ï§ÄÏÑ†
        if (this.isAimingMagicDagger) { /* ... Ï°∞Ï§ÄÏÑ† Í∑∏Î¶¨Í∏∞ ... */ }
        // ÎåÄÏãú Í∂§Ï†Å
        if (this.isDashing) { /* ... Í∂§Ï†Å Í∑∏Î¶¨Í∏∞ ... */ }

        // Ïú†Îãõ Î™∏ÌÜµ Ïä§ÏºÄÏùº Ï†ÅÏö©
        ctx.translate(this.pixelX, this.pixelY);
        ctx.scale(totalScale, totalScale);
        ctx.translate(-this.pixelX, -this.pixelY);

        // Ïä§ÌÑ¥ Ïãú Ìà¨Î™ÖÎèÑ
        if (this.isStunned > 0) ctx.globalAlpha = 0.7;
        // ÏåçÍ≤Ä ÌëúÏãù
        if (this.isMarkedByDualSword.active) { /* ... ÌëúÏãù Í∑∏Î¶¨Í∏∞ ... */ }

        // Ïú†Îãõ Î™∏ÌÜµ ÏÉâÏπ† Î∞è ÌÖåÎëêÎ¶¨
        switch(this.team) { /* ... ÌåÄ ÏÉâÏÉÅ Ï†ÅÏö© ... */ }
        ctx.beginPath(); ctx.arc(this.pixelX, this.pixelY, GRID_SIZE / 1.67, 0, Math.PI * 2); ctx.fill();
        if (isOutlineEnabled) { /* ... ÌÖåÎëêÎ¶¨ Í∑∏Î¶¨Í∏∞ ... */ }

        // Îàà Í∑∏Î¶¨Í∏∞
        { /* ... Îàà Í∑∏Î¶¨Í∏∞ Î°úÏßÅ (Ïù¥Ï†ÑÍ≥º ÎèôÏùº) ... */ }

        ctx.restore(); // Î™∏ÌÜµ Ïä§ÏºÄÏùº Î≥µÏõê

        // Ïù¥Î¶ÑÌëú
        if (this.name) { /* ... Ïù¥Î¶ÑÌëú Í∑∏Î¶¨Í∏∞ ... */ }
        // Î∂ÄÎ©îÎûë ÏÑ†
        if (this.isBeingPulled && this.puller) { /* ... ÏÑ† Í∑∏Î¶¨Í∏∞ ... */ }
        // Ïä§ÌÑ¥ Ïù¥ÌéôÌä∏
        if (this.isStunned > 0) { /* ... Ïä§ÌÑ¥ ÏïÑÏù¥ÏΩò Í∑∏Î¶¨Í∏∞ ... */ }


        // --- Î¨¥Í∏∞ Í∑∏Î¶¨Í∏∞ (weaponary.jsÏùò drawEquipped Ìò∏Ï∂ú) ---
        ctx.save();
        ctx.translate(this.pixelX, this.pixelY); // Ïú†Îãõ ÏúÑÏπò ÏõêÏ†ê
        if (this.isKing) { // ÏôïÍ¥Ä Í∑∏Î¶¨Í∏∞
            /* ... ÏôïÍ¥Ä Í∑∏Î¶¨Í∏∞ Î°úÏßÅ (Ïä§ÏºÄÏùº Ï†ÅÏö© Ìè¨Ìï®) ... */
             const kingDrawScale = 1.2; // ÏôïÍ¥Ä ÏûêÏ≤¥ ÌÅ¨Í∏∞
            ctx.translate(0, -GRID_SIZE * 0.5 * totalScale); // ÏúÑÏπò Ï°∞Ï†ï (Ïä§ÏºÄÏùº Í≥†Î†§)
            ctx.scale(kingDrawScale * totalScale, kingDrawScale * totalScale); // ÏµúÏ¢Ö Ïä§ÏºÄÏùº Ï†ÅÏö©
            ctx.fillStyle = '#facc15'; ctx.strokeStyle = 'black'; ctx.lineWidth = 1 / (kingDrawScale * totalScale); // Ïä§ÏºÄÏùº Ïó≠Î≥¥Ï†ï
            ctx.beginPath();
            ctx.moveTo(-GRID_SIZE * 0.4, -GRID_SIZE * 0.1); ctx.lineTo(-GRID_SIZE * 0.4, GRID_SIZE * 0.2);
            ctx.lineTo(GRID_SIZE * 0.4, GRID_SIZE * 0.2); ctx.lineTo(GRID_SIZE * 0.4, -GRID_SIZE * 0.1);
            ctx.lineTo(GRID_SIZE * 0.2, 0); ctx.lineTo(0, -GRID_SIZE * 0.1);
            ctx.lineTo(-GRID_SIZE * 0.2, 0); ctx.closePath();
            ctx.fill(); ctx.stroke();
        } else if (this.weapon) {
            // [üé® REMOVED] Ïó¨Í∏∞ÏÑú Îπõ Ïù¥ÌéôÌä∏ Í∑∏Î¶¨Îäî Î°úÏßÅ Ï†úÍ±∞
            // weaponary.jsÏùò drawEquipped Ìï®ÏàòÍ∞Ä Îπõ Ïù¥ÌéôÌä∏ Ìè¨Ìï®ÌïòÏó¨ Î¨¥Í∏∞Î•º Í∑∏Î¶º
            this.weapon.drawEquipped(ctx, { ...this, pixelX: 0, pixelY: 0 }); // ÏÉÅÎåÄ Ï¢åÌëú Ï†ÑÎã¨
        }
        ctx.restore(); // Ïú†Îãõ ÏúÑÏπò ÏõêÏ†ê Î≥µÏõê


        // --- ÏÉÅÌÉú Î∞î Í∑∏Î¶¨Í∏∞ (Ïø®ÌÉÄÏûÑ ÏõêÌòï ÌÖåÎëêÎ¶¨ Ìè¨Ìï®, Ïù¥Ï†ÑÍ≥º ÎèôÏùº) ---
        /* ... Ï≤¥Î†•Î∞î, Í≥µÍ≤© Ïø®ÌÉÄÏûÑ Î∞î, Ïä§Ìè∞ Î∞î, Ïä§ÌÇ¨ Ïø®ÌÉÄÏûÑ ÏõêÌòï ÌÖåÎëêÎ¶¨ Í∑∏Î¶¨Í∏∞ Î°úÏßÅ ... */
        const barWidth = GRID_SIZE * 0.8 * totalScale;
        const barHeight = 4;
        const barGap = 1;
        const barX = this.pixelX - barWidth / 2;
        const healthBarIsVisible = this.hp < this.maxHp || this.hpBarVisibleTimer > 0;
        const normalAttackIsVisible = (this.isCasting && this.weapon?.type === 'poison_potion') || (this.attackCooldown > 0);
        const kingSpawnBarIsVisible = this.isKing && this.spawnCooldown > 0;
        let specialSkillIsVisible =
            (this.weapon?.type === 'magic_dagger' && this.magicDaggerSkillCooldown > 0) ||
            (this.weapon?.type === 'axe' && this.axeSkillCooldown > 0) || // ÎèÑÎÅº Ï∂îÍ∞Ä
            (this.weapon?.type === 'ice_diamond' && this.iceDiamondChargeTimer > 0 && this.iceDiamondCharges < 5) ||
            (this.weapon?.type === 'magic_spear' && this.magicCircleCooldown > 0) ||
            (this.weapon?.type === 'boomerang' && this.boomerangCooldown > 0) ||
            (this.weapon?.type === 'shuriken' && this.shurikenSkillCooldown > 0) ||
            (this.weapon?.type === 'fire_staff' && this.fireStaffSpecialCooldown > 0) ||
            (this.weapon?.type === 'dual_swords' && this.dualSwordSkillCooldown > 0) ||
            (this.isCasting);
        if (this.attackCooldown > 0 && !this.isCasting) specialSkillIsVisible = false;

        const barsToShow = [];
        if (normalAttackIsVisible) barsToShow.push('attack');
        if (healthBarIsVisible) barsToShow.push('health');

        if (barsToShow.length > 0) {
             const kingYOffset = this.isKing ? GRID_SIZE * 0.4 * totalScale : 0;
            const totalBarsHeight = (barsToShow.length * barHeight) + ((barsToShow.length - 1) * barGap);
            let currentBarY = this.pixelY - (GRID_SIZE * 0.9 * totalScale) - totalBarsHeight - kingYOffset;

            if (normalAttackIsVisible) { /* ... Í≥µÍ≤© Ïø®ÌÉÄÏûÑ Î∞î Í∑∏Î¶¨Í∏∞ ... */ }
            if (healthBarIsVisible) { /* ... Ï≤¥Î†• Î∞î Î∞è Î†àÎ≤® Í∑∏Î¶¨Í∏∞ ... */ }
        }
        if (kingSpawnBarIsVisible) { /* ... Ïä§Ìè∞ Î∞î Í∑∏Î¶¨Í∏∞ ... */ }
        if (specialSkillIsVisible) { /* ... Ïä§ÌÇ¨ Ïø®ÌÉÄÏûÑ ÏõêÌòï ÌÖåÎëêÎ¶¨ Í∑∏Î¶¨Í∏∞ (ÎèÑÎÅº Ìè¨Ìï®) ... */
             let fgColor, progress = 0, max = 1;
             if (this.weapon?.type === 'fire_staff') { /* ... */ }
             else if (this.weapon?.type === 'magic_spear') { /* ... */ }
             else if (['boomerang', 'shuriken', 'poison_potion', 'magic_dagger', 'dual_swords', 'axe'].includes(this.weapon?.type)) { // ÎèÑÎÅº Ï∂îÍ∞Ä
                fgColor = '#94a3b8';
                if(this.weapon.type === 'boomerang') { /* ... */ }
                else if(this.weapon.type === 'shuriken') { /* ... */ }
                else if(this.weapon.type === 'magic_dagger') { /* ... */ }
                else if(this.weapon.type === 'dual_swords') { /* ... */ }
                else if(this.weapon.type === 'axe') { progress = max - this.axeSkillCooldown; max = 240; } // ÎèÑÎÅº Ïø®ÌÉÄÏûÑ
                else { /* ÎèÖ Ìè¨ÏÖò Ï∫êÏä§ÌåÖ */ }
             }
             else if (this.weapon?.type === 'ice_diamond') { /* ... */ }

             if (fgColor) { /* ... ÏõêÌòï ÌÖåÎëêÎ¶¨ Í∑∏Î¶¨Í∏∞ ... */ }
        }


        // Í≤ΩÍ≥Ñ ÏÉÅÌÉú ÌëúÏãú (!)
        /* ... Í≤ΩÍ≥Ñ ÌëúÏãú Î°úÏßÅ ... */
    }

    // ... (performDualSwordTeleportAttack Ìï®ÏàòÎäî Ïù¥Ï†ÑÍ≥º ÎèôÏùº) ...
     performDualSwordTeleportAttack(enemies) {
        const target = this.dualSwordTeleportTarget;
        if (target && target.hp > 0) {
            const teleportPos = this.gameManager.findEmptySpotNear(target);
            this.pixelX = teleportPos.x;
            this.pixelY = teleportPos.y;
            this.dualSwordSpinAttackTimer = 20; // ÌöåÏ†Ñ Ïï†ÎãàÎ©îÏù¥ÏÖò ÌÉÄÏù¥Î®∏

            const damageRadius = GRID_SIZE * 2;
            enemies.forEach(enemy => {
                if (Math.hypot(this.pixelX - enemy.pixelX, this.pixelY - enemy.pixelY) < damageRadius) {
                    enemy.takeDamage(this.attackPower * 1.5 + this.specialAttackLevelBonus, {}, this); // Î†àÎ≤® Î≥¥ÎÑàÏä§ Ï∂îÍ∞Ä
                }
            });
            this.gameManager.nexuses.forEach(nexus => { // ÎÑ•ÏÑúÏä§ÎèÑ Í≥µÍ≤©
                 if (nexus.team !== this.team && !nexus.isDestroying && Math.hypot(this.pixelX - nexus.pixelX, this.pixelY - nexus.pixelY) < damageRadius) {
                    nexus.takeDamage(this.attackPower * 1.5 + this.specialAttackLevelBonus); // Î†àÎ≤® Î≥¥ÎÑàÏä§ Ï∂îÍ∞Ä
                 }
            });
            this.gameManager.audioManager.play('rotaryknife'); // ÌöåÏ†ÑÎ≤†Í∏∞ Ìö®Í≥ºÏùå
        }
        this.dualSwordTeleportTarget = null; // ÌÉÄÍ≤ü Ï¥àÍ∏∞Ìôî
        this.state = 'IDLE'; // ÏÉÅÌÉú Ï¥àÍ∏∞Ìôî
    }
}
